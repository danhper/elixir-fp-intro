関数型というパラダイムが昔から存在しているものの、ここ数年主流になってきています。
Elixirは関数型というパラダイムをどう

関数型の基礎的なところから、Elixirはどうやってそのパラダイムを使って、
開発者にとって生産性の高い言語にできたのかについて紹介します。


## 伝えたいこと

* 手続きを中心に書いてきた人に、関数型言語の最低限の知識
* 関数型としてのElixirの立ち位置
* 関数型（イミュータブルデータ）とmessage passingの関係

## 発表の構成


1. 関数型の紹介
  * そもそも関数型とは何か？
  * どういうメリット・デメリットがあるのか？
2. Elixirのどこが部分が関数型なのか
  * 関数型系のフィーチャーの簡単な紹介/リマインダー（パターンマッチング, lazy vs strict evaluationなど）
  * Elixirのどこが純粋関数型ではないのか(副作用の扱いなど)
3. immutableなデータにおけるステート管理
  * いくつかのアプローチの紹介（特にcontinuation passingの説明）
  * 再帰関数を用いたステート管理
  * OTPの`send`と`receive`の簡単な紹介/リマインダー
  * Elixir/OTPにおけるGenServerなどの基本的な構成
